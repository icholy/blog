<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Choly&#39;s Blog</title>
    <link>https://choly.ca/tags/golang/</link>
    <description>Recent content in golang on Choly&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Feb 2021 12:48:39 -0500</lastBuildDate><atom:link href="https://choly.ca/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debugging a flaky Go test with Mozilla rr</title>
      <link>https://choly.ca/post/debugging-go-with-rr/</link>
      <pubDate>Mon, 22 Feb 2021 12:48:39 -0500</pubDate>
      
      <guid>https://choly.ca/post/debugging-go-with-rr/</guid>
      <description>This is how you debug a test that only fails once every 1000 times.
The Test package my import ( &amp;#34;math/rand&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;time&amp;#34; ) func init() { rand.Seed(time.Now().UnixNano()) } func TestRandFail(t *testing.T) { if n := rand.Intn(1000); n == 50 { t.Fatalf(&amp;#34;finally got %d&amp;#34;, n) } } This is obviously a pedagogical example. Get the newest version of rr git clone https://github.com/rr-debugger/rr.git cd rr git checkout 5.4.0 # change this to the latest release (DO NOT BUILD HEAD) mkdir build cd build cmake .</description>
    </item>
    
    <item>
      <title>Merging Multiple Git Repositories Into A MonoRepo</title>
      <link>https://choly.ca/post/git-merge-to-monorepo/</link>
      <pubDate>Mon, 13 Aug 2018 12:04:56 -0400</pubDate>
      
      <guid>https://choly.ca/post/git-merge-to-monorepo/</guid>
      <description>Note: Replace thing with your own repo name in the examples.
1. Create a repository which will store all your code mkdir monorepo &amp;amp;&amp;amp; cd monorepo git init . echo &amp;#34;# MonoRepo&amp;#34; &amp;gt; README.md git add . git commit -m &amp;#34;first commit&amp;#34; 2. Clone one of the existing repositories to a temporary location Example Remote: ssh://git@code.company.com/thing.git
mkdir /tmp/thing git clone ssh://git@code.company.com/thing.git /tmp/thing cd /tmp/thing 3. Use git filter-branch to rewrite the history into a sub-directory.</description>
    </item>
    
    <item>
      <title>TypeScript: Working with JSON</title>
      <link>https://choly.ca/post/typescript-json/</link>
      <pubDate>Sat, 19 Mar 2016 15:41:44 -0400</pubDate>
      
      <guid>https://choly.ca/post/typescript-json/</guid>
      <description>EDITS:
Calling toString on Date is for illustrative purposes. There&amp;rsquo;s a full commented example at the end. Use toJSON method as suggested by Schipperz. Add reviver method as suggested by Anders Ringqvist. So you have a User type in your code.
interface User { name: string; age: number; created: Date; } At some point you&amp;rsquo;re going to want to encode this as JSON. This works as you&amp;rsquo;d expect.
&amp;gt; JSON.stringify({ name: &amp;#34;bob&amp;#34;, age: 34, created: new Date() }); &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;bob&amp;#34;,&amp;#34;age&amp;#34;:34,&amp;#34;created&amp;#34;:&amp;#34;2016-03-19T18:15:12.</description>
    </item>
    
    <item>
      <title>Custom JSON Marshalling in Go</title>
      <link>https://choly.ca/post/go-json-marshalling/</link>
      <pubDate>Fri, 10 Apr 2015 12:54:44 -0400</pubDate>
      
      <guid>https://choly.ca/post/go-json-marshalling/</guid>
      <description>Go&amp;rsquo;s encoding/json package makes it really easy to marshal structs to JSON data.
package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) type MyUser struct { ID int64 `json:&amp;#34;id&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` LastSeen time.Time `json:&amp;#34;lastSeen&amp;#34;` } func main() { _ = json.NewEncoder(os.Stdout).Encode( &amp;amp;MyUser{1, &amp;#34;Ken&amp;#34;, time.Now()}, ) } Output:
{&amp;#34;id&amp;#34;:1,&amp;#34;name&amp;#34;:&amp;#34;Ken&amp;#34;,&amp;#34;lastSeen&amp;#34;:&amp;#34;2009-11-10T23:00:00Z&amp;#34;} But what if we want to change how one of the field values are displayed? For example, say I wanted LastSeen to be a unix timestamp.</description>
    </item>
    
  </channel>
</rss>
