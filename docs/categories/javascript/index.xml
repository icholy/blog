<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Choly&#39;s Blog</title>
    <link>https://choly.ca/categories/javascript/</link>
    <description>Recent content in JavaScript on Choly&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Mar 2016 10:06:22 -0400</lastBuildDate>
    <atom:link href="https://choly.ca/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Angular Events</title>
      <link>https://choly.ca/post/angular-events/</link>
      <pubDate>Wed, 23 Mar 2016 10:06:22 -0400</pubDate>
      <guid>https://choly.ca/post/angular-events/</guid>
      <description>I&amp;rsquo;ve been trying to find an elegant way of dealing with events in AngularJS recently. If you&amp;rsquo;re not farmiliar with Angular, that&amp;rsquo;s ok, this is a pretty common pattern.&#xA;Here I have a controller that registers an event listener:&#xA;function MyController($rootScope) { $rootScope.$on(&amp;#39;event1&amp;#39;, () =&amp;gt; { console.log(&amp;#39;event 1 occured&amp;#39;); }); } There&amp;rsquo;s an issue with this code. It doesn&amp;rsquo;t unbind the listener when the controller (or its scope) is destroyed. Let&amp;rsquo;s take care of this.</description>
    </item>
    <item>
      <title>SWAPM: Code generation made easy.</title>
      <link>https://choly.ca/post/swapm-code-generation-made-easy/</link>
      <pubDate>Thu, 18 Oct 2012 12:02:06 -0400</pubDate>
      <guid>https://choly.ca/post/swapm-code-generation-made-easy/</guid>
      <description>I finally got around to reading the Pragmatic Programmer book. One thing that really interested me was the section on Code Generation. So in a recent C++ project I was interfacing with postgres and there was a LOT of code repetition. The sql query, class members, getters/setters, response parsing logic. They all contained the same information. Perfect I thought, here was the ideal chance to give code generation a shot. My first incarnation was a very ugly perl script (aren&amp;rsquo;t they all .</description>
    </item>
    <item>
      <title>Ember.js with Brunch</title>
      <link>https://choly.ca/post/emberjs-with-brunch/</link>
      <pubDate>Thu, 07 Jun 2012 12:04:56 -0400</pubDate>
      <guid>https://choly.ca/post/emberjs-with-brunch/</guid>
      <description>I&amp;rsquo;ve recently discovered the brilliant Ember.js library and the first major issue I ran into was how to organize/modularize this thing!? At first I just opted into RequireJs because that&amp;rsquo;s what I know but I started hitting walls fast. I decided to try out the Brunch build system since I had heard good things about it before and this was a great opportunity to learn how to use it. Brunch uses skeletons which are essentially project templates to get rid of the boilerplate.</description>
    </item>
    <item>
      <title>CoffeeScript</title>
      <link>https://choly.ca/post/coffeescript/</link>
      <pubDate>Sun, 07 Aug 2011 12:37:05 -0400</pubDate>
      <guid>https://choly.ca/post/coffeescript/</guid>
      <description>I just spent the last 5 hours learning CoffeeScript and I feel like I have pretty much everything down. My brain is kinda dead right now, but at the same time I&amp;rsquo;m pretty excited to actually try it in a real project. In case you don&amp;rsquo;t know CoffeeScript is a python-esque language which &amp;lsquo;compiles&amp;rsquo; into javascript. classes, list comprehension inheritance, ranges, semantic code etc&amp;hellip;. dream come true. http://jashkenas.github.com/coffee-script/&#xA;One thing I was worried about was being able to use 3rd party libraries with it.</description>
    </item>
    <item>
      <title>Reloader - multi browser live web preview</title>
      <link>https://choly.ca/post/reloader/</link>
      <pubDate>Wed, 20 Jul 2011 12:40:37 -0400</pubDate>
      <guid>https://choly.ca/post/reloader/</guid>
      <description>I recently started developing on linux and unfortunately stylizer 5 does not support linux. So I&amp;rsquo;m back to using kate. However, one thing that I really missed right away was the instant preview feature. Having to go and refresh multiple browsers every time you change a line of code blows. I searched around for a bit and found a few tools but none of them were any good. I needed something that would work in multiple browsers at the same time and I couldn&amp;rsquo;t find anything to my liking so I wrote my own.</description>
    </item>
    <item>
      <title>JPProxy - tiny jsonp proxy</title>
      <link>https://choly.ca/post/jpproxy/</link>
      <pubDate>Fri, 15 Jul 2011 12:43:11 -0400</pubDate>
      <guid>https://choly.ca/post/jpproxy/</guid>
      <description>JPProxy is a very simple yet powerful JSONP script. It allows you to make ajax like requests to any page on a server that has the jpproxy.php script on it. I tried really hard to make it as simple and generic as possible so the source is tiny.&#xA;1. Client A script tag is injected into the DOM and all the values are added to the url as GET parameters.</description>
    </item>
  </channel>
</rss>
