<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Choly&#39;s Blog</title>
    <link>http://choly.ca/tags/golang/</link>
    <description>Recent content in Golang on Choly&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Aug 2018 12:04:56 -0400</lastBuildDate>
    
	<atom:link href="http://choly.ca/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Merging Multiple Git Repositories Into A MonoRepo</title>
      <link>http://choly.ca/post/git-merge-to-monorepo/</link>
      <pubDate>Mon, 13 Aug 2018 12:04:56 -0400</pubDate>
      
      <guid>http://choly.ca/post/git-merge-to-monorepo/</guid>
      <description>Note: Replace thing with your own repo name in the examples.
 Create a repository which will store all your code.  mkdir monorepo &amp;amp;&amp;amp; cd monorepo git init . echo &amp;quot;# MonoRepo&amp;quot; &amp;gt; README.md git add . git commit -m &amp;quot;first commit&amp;quot;   Clone one of the existing repositories to a temporary location.  Example Remote: &amp;ldquo;ssh://git@code.company.com/thing.git&amp;rdquo;
mkdir /tmp/thing git clone ssh://git@code.company.com/thing.git /tmp/thing cd /tmp/thing   Use git filter-branch to rewrite the history into a sub-directory.</description>
    </item>
    
    <item>
      <title>TypeScript: Working with JSON</title>
      <link>http://choly.ca/post/typescript-json/</link>
      <pubDate>Sat, 19 Mar 2016 15:41:44 -0400</pubDate>
      
      <guid>http://choly.ca/post/typescript-json/</guid>
      <description>EDITS:
 Calling toString on Date is for illustrative purposes. There&amp;rsquo;s a full commented example at the end. Use toJSON method as suggested by Schipperz. Add reviver method as suggested by Anders Ringqvist.  So you have a User type in your code.
interface User { name: string; age: number; created: Date; }  At some point you&amp;rsquo;re going to want to encode this as JSON. This works as you&amp;rsquo;d expect.</description>
    </item>
    
    <item>
      <title>Custom JSON Marshalling in Go</title>
      <link>http://choly.ca/post/go-json-marshalling/</link>
      <pubDate>Fri, 10 Apr 2015 12:54:44 -0400</pubDate>
      
      <guid>http://choly.ca/post/go-json-marshalling/</guid>
      <description>Go&amp;rsquo;s encoding/json package makes it really easy to marshal structs to JSON data.
package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;os&amp;quot; &amp;quot;time&amp;quot; ) type MyUser struct { ID int64 `json:&amp;quot;id&amp;quot;` Name string `json:&amp;quot;name&amp;quot;` LastSeen time.Time `json:&amp;quot;lastSeen&amp;quot;` } func main() { _ = json.NewEncoder(os.Stdout).Encode( &amp;amp;MyUser{1, &amp;quot;Ken&amp;quot;, time.Now()}, ) }  Output:
{&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;Ken&amp;quot;,&amp;quot;lastSeen&amp;quot;:&amp;quot;2009-11-10T23:00:00Z&amp;quot;}  But what if we want to change how one of the field values are displayed? For example, say I wanted LastSeen to be a unix timestamp.</description>
    </item>
    
  </channel>
</rss>