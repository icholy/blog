<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angularjs on Choly&#39;s Blog</title>
    <link>http://choly.ca/tags/angularjs/</link>
    <description>Recent content in Angularjs on Choly&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Mar 2016 10:06:22 -0400</lastBuildDate>
    <atom:link href="http://choly.ca/tags/angularjs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Angular Events</title>
      <link>http://choly.ca/post/angular-events/</link>
      <pubDate>Wed, 23 Mar 2016 10:06:22 -0400</pubDate>
      
      <guid>http://choly.ca/post/angular-events/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been trying to find an elegant way of dealing with events in AngularJS recently.
If you&amp;rsquo;re not farmiliar with Angular, that&amp;rsquo;s ok, this is a pretty common pattern.&lt;/p&gt;

&lt;p&gt;Here I have a controller that registers an event listener:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function MyController($rootScope) {
  $rootScope.$on(&#39;event1&#39;, () =&amp;gt; {
    console.log(&#39;event 1 occured&#39;);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s an issue with this code. It doesn&amp;rsquo;t unbind the listener when the controller (or its scope) is destroyed.
Let&amp;rsquo;s take care of this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function MyController($scope, $rootScope) {
  let unbindEvent1 = $rootScope.$on(&#39;event1&#39;, () =&amp;gt; {
    console.log(&#39;event 1 occured&#39;);
  });
  $scope.$on(&#39;$destroy&#39;, unbindEvent1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is ok, but gets unwieldy when you have multiple listeners.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function MyController($scope, $rootScope) {
  let unbindThisHappened = $rootScope.$on(&#39;thisHappened&#39;, () =&amp;gt; {
    console.log(&#39;this happened&#39;);
  });
  let unbindThatHappened = $rootScope.$on(&#39;thatHappened&#39;, () =&amp;gt; {
    console.log(&#39;that happened&#39;);
  });
  let unbindErrorHappened = $rootScope.$on(&#39;errorHappened&#39;, () =&amp;gt; {
    console.log(&#39;error happened&#39;);
  });
  $scope.$on(&#39;$destroy&#39;, () =&amp;gt; {
    unbindThisHappened();
    unbindThatHappened();
    unbindErrorHappened();
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A better way would be to have something called a &lt;code&gt;ListenerGroup&lt;/code&gt;. Here&amp;rsquo;s how it would work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function MyController($scope, $rootScope) {
  let listeners = ListenerGroup.for($rootScope);
  listeners.$on(&#39;thisHappened&#39;, () =&amp;gt; console.log(&#39;this&#39;));
  listeners.$on(&#39;thatHappened&#39;, () =&amp;gt; console.log(&#39;that&#39;));
  listeners.$on(&#39;errorHappened&#39;, () =&amp;gt; console.log(&#39;error&#39;));
  $scope.$on(&#39;$destroy&#39;, () =&amp;gt; listeners.unbind());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &lt;code&gt;ListenerGroup&lt;/code&gt; was made to be angular aware, you could even take it a step further.
I&amp;rsquo;m not too sure about this, because it&amp;rsquo;s not apparent what &lt;code&gt;link&lt;/code&gt; does and it doesn&amp;rsquo;t really save that much typing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function MyController($scope, $rootScope) {
  let listeners = ListenerGroup.for($rootScope);
  listeners.$on(&#39;thisHappened&#39;, () =&amp;gt; console.log(&#39;this&#39;));
  listeners.$on(&#39;thatHappened&#39;, () =&amp;gt; console.log(&#39;that&#39;));
  listeners.$on(&#39;errorHappened&#39;, () =&amp;gt; console.log(&#39;error&#39;));
  listeners.link($scope);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Implementing &lt;code&gt;ListenerGroup&lt;/code&gt; is pretty simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class ListenerGroup {

  constructor($scope) {
    this._unbinds = [];
    this._scope = $scope;
  }

  $on(event, listener) {
    let unbind = this._scope.$on(event, listener);
    this._unbinds.push(unbind);
  }

  unbind() {
    for (let unbind of this._unbinds) {
      unbind();
    }
  }

  link($scope) {
    $scope.$on(&#39;$destroy&#39;, () =&amp;gt; this.unbind());
  }

  static for($scope) {
    return new ListenerGroup($scope);
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>