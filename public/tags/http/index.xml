<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http on Choly&#39;s Blog</title>
    <link>http://choly.ca/tags/http/</link>
    <description>Recent content in Http on Choly&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Feb 2018 12:17:21 -0400</lastBuildDate>
    
	<atom:link href="http://choly.ca/tags/http/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go: Composable http.Handler</title>
      <link>http://choly.ca/post/go-experiments-with-handler/</link>
      <pubDate>Mon, 19 Feb 2018 12:17:21 -0400</pubDate>
      
      <guid>http://choly.ca/post/go-experiments-with-handler/</guid>
      <description>When using net/http, handling errors is kinda annoying.
http.HandleFunc(&amp;quot;/foo&amp;quot;, func(w http.ResponseWriter, r *http.Request) { thing, err := storage.Get(&amp;quot;thing&amp;quot;) if err != nil { http.Error(w, err.Error(), 500) return } _ = json.NewEncoder(w).Encode(thing) })  Ideally, I could just return an error from the handler. Let&amp;rsquo;s create a type to let that happen.
type MyHandlerFunc func(w http.ResponseWriter, r *http.Request) error func (f MyHandlerFunc) ServeHTTP(w http.ResponseWriter, r *http.Request) { if err := f(w, r); err !</description>
    </item>
    
  </channel>
</rss>